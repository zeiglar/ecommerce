@using System.Reflection
@using Demo.Core.Helpers
@model System.Collections.IList

<div>
    <div>
        @Ajax.ActionLink("New", "CreateMember", null, new AjaxOptions() { UpdateTargetId = "Main" }, new { @class = "btn  btn-default" })
        @*@Html.ActionLink("Export", null, null, new { report = true, KeywordField = Request["KeywordField"], keyword = Request["keyword"] }, new { @class = "btn  btn-default", target = "_blank" })*@
        <a class="btn  btn-default" href="javascript:;" onclick="$('#searchform').toggle('blind');">Search</a>
        @using (Ajax.BeginForm(null, null, new AjaxOptions { UpdateTargetId = "Main", HttpMethod = "get" }, new { id = "searchform", style = "display:none" }))
        {
       
            <div class="form-horizontal" style="margin-top: 5px;">
                @foreach (PropertyInfo title in ViewBag.PropertyInfo)
                {
                    if (@title.Name != "Id")
                    {
                    <div class="form-group col-md-4">
                        <label class="col-md-6 control-label">@title.Name</label>
                        <div class="col-md-6">
                            @{
                        Type type = title.GetMethod.ReturnType;
                        Type nullType = Nullable.GetUnderlyingType(type);
                        string name;
                        if (nullType != null)
                        {
                            name = nullType.Name;
                        }
                        else
                        {
                            name = type.Name;
                        }

                        switch (name)
                        {
                            case "Boolean":
                                <select  name="Search_@title.Name" class="form-control">
                                    <option value="">All</option>
                                    <option value="true"  @(Request.QueryString["Search_" + @title.Name] == "true" ? "selected" : "")>True</option>
                                    <option value="false"  @(Request.QueryString["Search_" + @title.Name] == "false" ? "selected" : "")>False</option>
                                </select>
                                break;
                            case "DateTime":
                                <input name="Search_@title.Name" class="form-control" type="date" style="width: 135px", @(Request.QueryString["Search_" + @title.Name])>
                                break;
                            case "Int32":
                            case "Int64":
                            case "Decimal":
                            default:
                                @Html.TextBox("Search_" + title.Name, Request["Search_" + title.Name], new { @class = "form-control" })
                                break;
                        }
                            }
                        </div>
                    </div>
                    }
                }
                <div class="col-md-2 col-md-offset-10">@* style="float: left; padding-right: 10px; white-space: nowrap;">*@
                    <input type="submit" class="btn  btn-default" value="StartSearch" />
                </div>
            </div>
        }
    </div>
</div>

<div class="table-responsive">
    <table class="table table-hover table-striped table-condensed">
        <thead>
            <tr>
                @foreach (PropertyInfo title in ViewBag.PropertyInfo)
                {
                    if (title.Name != "Id")
                    {
                    <th>
                        @if (title.Name != null)
                        {
                            if (Request["ordering"] == title.Name)
                            {
                            @Ajax.ActionLink(string.Format("{0} ↓", title.Name), null, new { ordering = title.Name + " desc" }, new AjaxOptions { UpdateTargetId = "Main" }) 
                            }
                            else if (Request["ordering"] == title.Name + " desc")
                            {
                            @Ajax.ActionLink(title.Name + " ↑", null, new { ordering = title.Name }, new AjaxOptions { UpdateTargetId = "Main" }) 
                            }
                            else
                            {
                            @Ajax.ActionLink(title.Name + "", null, new { ordering = title.Name }, new AjaxOptions { UpdateTargetId = "Main" }) 
                            }
                        }
                    </th>
                    }
                }
                <th>Edit
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {   
                <tr>
                    @foreach (PropertyInfo title in ViewBag.PropertyInfo)
                    {
                        if (title.Name != "Id")
                        {
                        <td>
                            @item.GetType().GetProperty(title.Name).GetValue(item, null)
                        </td>
                        }
                    }
                    <td>
                        <div style="text-align: left;">
                            @Ajax.ActionLink("Details", "ShowMember", null, new { id = item.GetType().GetProperty("Id").GetValue(item, null) }, new AjaxOptions { UpdateTargetId = "Main" }) | 
                            @Ajax.ActionLink("Edit", "EditMember", null, new { id = item.GetType().GetProperty("Id").GetValue(item, null) }, new AjaxOptions { UpdateTargetId = "Main" }) | 
                            @Ajax.ActionLink("Delete", "DeleteMember", null, new { id = item.GetType().GetProperty("Id").GetValue(item, null) }, new AjaxOptions { UpdateTargetId = "Main", HttpMethod = "Delete", Confirm = "The record will be deleted！Do you confirmed ?" })
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@Html.Raw(Ajax.MikePager((int)Model.GetType().GetProperty("PageIndex").GetValue(Model, null), (int)Model.GetType().GetProperty("PageSize").GetValue(Model, null), (int)Model.GetType().GetProperty("TotalCount").GetValue(Model, null)))